<?php

return [
    "Monoliths are easier to deploy initially, but harder to scale as complexity grows.",
    "We started with a monolithic app and slowly split it into services as teams grew.",
    "Microservices help with team autonomy, but add complexity around communication and testing.",
    "A monolith is not bad if your team is small and your domain is well understood.",
    "Microservices need service discovery, CI/CD, and solid monitoring to work well.",
    "We regret going microservices too early — our deployment pipeline wasn’t ready.",
    "Monolithic architecture can be easier to debug and trace compared to distributed systems.",
    "We use Docker Compose for our monolith locally and Kubernetes for our microservices in production.",
    "You can modularize a monolith using packages and boundaries — it's a step toward services.",
    "The biggest problem with microservices is not code, it’s data consistency and transactions.",
    "Microservices shine when services can evolve independently and be deployed separately.",
    "A single shared database across microservices defeats the purpose of separation.",
    "Monoliths often turn into big balls of mud — boundaries are key.",
    "Microservices require a culture shift — DevOps, observability, ownership.",
    "Testing microservices is harder due to network dependencies and mocks.",
    "With microservices, service versioning and API contracts become critical.",
    "You don’t need microservices until you can’t scale your team or deploy fast enough.",
    "Use feature flags inside a monolith to simulate service-like decoupling.",
    "Monoliths are better for MVPs and early-stage startups.",
    "We started with Laravel as a monolith and extracted auth and billing as services later.",
    "Microservices work best with messaging patterns like event-driven architecture.",
    "We use GraphQL as a BFF layer over microservices — helps frontends stay flexible.",
    "The network is never reliable — microservices must be resilient.",
    "Monoliths can become service-oriented internally — it’s not all-or-nothing.",
    "We split our monolith into services using domain-driven design principles.",
    "Monoliths are easier to host — no orchestrators needed.",
    "We use a hybrid — monolith for core logic, services for third-party integrations.",
    "Operational overhead is real with microservices: logging, tracing, errors.",
    "Deployment coordination is complex if microservices aren’t truly independent.",
    "Monolith scaling is easier in vertical scaling scenarios.",
    "Microservices enable technology polyglot — each service in its best-suited stack.",
    "You can achieve service boundaries with Laravel modules inside a monolith.",
    "Going microservices without proper team maturity leads to disaster.",
    "Monolith-first is the new microservices-first — premature optimization hurts.",
    "Some services are better kept inside the monolith — like auth or validation.",
    "Choose based on your **team size**, not just your traffic size.",
    "We found success by using a monorepo for microservices with shared tooling.",
    "Micro frontends pair well with microservices for full modular delivery.",
    "The more services you have, the more observability you need.",
    "Make sure you have CI/CD and shared libraries before going microservices.",
    "Ultimately, architecture should evolve — don’t lock into a pattern too early.",
];
