<?php

return [
    "Laravel Octane leverages high-performance servers like Swoole and RoadRunner.",
    "We saw major improvements in response time after enabling Octane in our microservices.",
    "Octane boosts Laravel apps by keeping the application in memory across requests.",
    "Stateless microservices benefit the most from Octane's persistent state model.",
    "Octane drastically reduces bootstrap time, which helps under high concurrency.",
    "You can use Octane with Swoole for coroutine-based async processing.",
    "Octane and RoadRunner support task workers, ideal for background job execution.",
    "We use Octane in our API gateway service for super-fast route resolution.",
    "Sessions and facades must be used carefully when Octane is enabled.",
    "Octane works great when combined with Horizon and queues in a microservices setup.",
    "Laravel Octane serves static content much faster compared to traditional PHP-FPM.",
    "Be cautious: singletons persist across requests, which can cause bugs if not reset.",
    "We reduced our TTFB by 60% after enabling Octane + Swoole.",
    "Stateless architecture is important when scaling Octane across multiple instances.",
    "Octane supports concurrency out of the box — a huge win for I/O-heavy services.",
    "We serve GraphQL APIs using Laravel Octane + Lighthouse for blazing-fast queries.",
    "Octane is best used with Docker or orchestrators like Kubernetes for microservices.",
    "We migrated our Laravel auth service to Octane and doubled the throughput.",
    "Use `octane:status` and `octane:reload` to monitor your Octane-powered services.",
    "Our Octane-based service acts as a lightweight BFF for our frontend microservices.",
    "Watch out for memory leaks — long-lived apps require solid garbage collection.",
    "Octane enabled us to process requests at sub-30ms latency consistently.",
    "We benchmarked Octane vs FPM — Octane served 3x more requests per second.",
    "Octane workers are persistent — reset shared data like cache or config manually.",
    "A shared Redis cache works well for Octane-based Laravel microservices.",
    "Octane helps cut costs by reducing container spin-up time in serverless hosting.",
    "Octane requires Laravel 8+ and benefits from PHP 8+ performance improvements.",
    "We use Octane only for services with predictable traffic patterns.",
    "Use `Octane::tick()` to register repeated jobs like metrics or logs flushing.",
    "We cache route lookups in Octane to speed up multi-service authentication.",
    "Octane is not ideal for apps that rely on dynamic bootstrapping per request.",
    "Our health-check endpoint is handled by an Octane worker in less than 5ms.",
    "Laravel Octane gives Laravel superpowers — especially in containerized deployments.",
    "We use Octane in our public API service and standard Laravel for admin dashboards.",
    "Octane with RoadRunner uses gRPC internally — great for internal RPC microservices.",
    "Octane lets Laravel catch up to Node.js and Go in raw performance scenarios.",
    "For microservices, we containerize Octane apps with only Swoole + PHP extensions.",
    "Octane makes scaling Laravel services horizontally more efficient.",
    "Octane improved our background task handling via faster process communication.",
    "If you’re building Laravel microservices, Octane is worth trying today.",
    "Octane is not magic — but used right, it’s a powerful performance booster.",
];
